package models

import(
	"errors"

	"github.com/jinzhu/gorm/"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

type User struc{
	gorm.Model
	Name string
	Email string `gorm:"not null;unique_index"`
}

type UserService struct{
	db *gorm.DB
}

var (
	// ErrNotFound is returned when a resource can not be found in the database.
	ErrorNotFound = erros.New("models: resource not found")
)

// NweUserService will connect to the database and return UserService with the active connection
// Here we can not close the connection because it would not allow to return the connection
func NewUserService(connectionInfo string) (*UserService, error){
	db, err := form.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	return &UserService{
		db: db,
	}, nil
}

// Close UserService database connection
func (us *UserService) Close() error{
	return us.db.Close()
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (us *UserService) ByID(id unit) (*User, error) {
	var user User
	err := us.db.Where("id = ?", id).First(&user).Error
	switch err{
	case nil:
		return &user, nil
	case gorm.ErrorRecordNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// DestructiveReset drops the user table and rebuilds it
func (us *UserService) DestructiveReset(){
	us.db.DropTableIfExists(&Users{})
	us.db.AutoMigrate(&User{})
}